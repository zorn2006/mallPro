{"version":3,"sources":["components/Modal.js","App.js","index.js"],"names":["Modal","_ref","activeModal","currentTitle","currentCaption","actionFlag","onCloseModal","onAction","currentButtonText","react_default","a","createElement","es6","id","onClose","title","caption","actions","type","action","GROUP_ID","group_id","COMMUNITY_ACCESS_TOKEN","access_token","APP_ACCESS_TOKEN","VERSION","v","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startScanFlow","openQRScanner","handleQRResult","QRResult","arguments","length","undefined","setState","state","isMember","sendQRResult","connect","send","method","request_id","params","objectSpread","user_id","fetchedUser","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","axios","get","qr","user","isMessagesAllowed","QRSuccessModal","t0","console","log","stop","activateModal","closeModal","joinToGroup","setTimeout","handleModalAction","flag","joinGroup","qrSuccess","activateJoinGroupModal","activePanel","areaVal","_this2","subscribe","_ref2","detail","data","result","qr_reult","response","is_allowed","before","photo_200","src","description","city","concat","first_name","last_name","onClick","size","level","components_Modal","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d9a77970.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport {ModalRoot, ModalCard} from '@vkontakte/vkui';\r\n\r\nconst Modal = ({activeModal, currentTitle, currentCaption, actionFlag, onCloseModal, onAction, currentButtonText}) => (\r\n    <ModalRoot activeModal={activeModal}>\r\n        <ModalCard\r\n            id={'MY_MODAL'}\r\n            onClose={() => onCloseModal()}\r\n            title={currentTitle}\r\n            caption={currentCaption}\r\n            actions={[{\r\n                title: currentButtonText,\r\n                type: 'primary',\r\n                action: () => onAction(actionFlag)\r\n            }]}\r\n        >\r\n        </ModalCard>\r\n    </ModalRoot>\r\n);\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport connect from '@vkontakte/vkui-connect';\r\nimport {Button, Avatar, Group, ListItem, Panel, PanelHeader, View} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport axios from 'axios'\r\n\r\nimport Modal from \"./components/Modal\";\r\n\r\nconst GROUP_ID = { group_id: 71638966}\r\nconst COMMUNITY_ACCESS_TOKEN = { access_token: '34815d25f1f4e6454b4aaf064994f3afc5a2e6159f019dbd3000d7b590889b7e8abc057e772843630a997'}\r\nconst APP_ACCESS_TOKEN = { access_token: '9d0508949d0508949d050894679d680f4099d059d050894c08dd272bb177ca900380deb'}\r\nconst VERSION = {\"v\": \"5.101\"}\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activePanel: 'home',\r\n            isMember: false,\r\n            isMessagesAllowed: false,\r\n            fetchedUser: null,\r\n            activeModal: null,\r\n            QRResult: null,\r\n            currentTitle: '',\r\n            currentCaption: '',\r\n            actionFlag: '',\r\n            areaVal: '',\r\n\r\n        };\r\n    }\r\n\r\n    startScanFlow = () => {\r\n        this.openQRScanner()\r\n    }\r\n\r\n    handleQRResult = (QRResult = '1111111') => {\r\n        this.setState({QRResult})\r\n\r\n        if (this.state.isMember) {\r\n            this.sendQRResult(this.state.QRResult)\r\n        } else {\r\n            connect.send('VKWebAppCallAPIMethod', {\r\n                method: \"groups.isMember\",\r\n                request_id: \"groups.isMember\",\r\n                params: {\r\n                    'user_id': this.state.fetchedUser.id,\r\n                    ...GROUP_ID,\r\n                    ...APP_ACCESS_TOKEN,\r\n                    ...VERSION\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    sendQRResult = async () => {\r\n        try {\r\n            await axios.get('https://reqres.in/api/users', {\r\n                qr: this.state.QRResult,\r\n                user: this.state.fetchedUser\r\n            })\r\n            if(this.state.isMessagesAllowed){\r\n                this.QRSuccessModal()\r\n            }else{\r\n                connect.send('VKWebAppCallAPIMethod', {\r\n                    method: \"messages.isMessagesFromGroupAllowed\",\r\n                    request_id: \"messages.isMessagesFromGroupAllowed\",\r\n                    params: {\r\n                        request_id: \"messages.isMessagesFromGroupAllowed\",\r\n                        user_id: this.state.fetchedUser.id,\r\n                        ...COMMUNITY_ACCESS_TOKEN,\r\n                        ...VERSION,\r\n                        ...GROUP_ID\r\n                    }\r\n                });\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n\r\n    }\r\n\r\n    activateModal = () => {\r\n        this.setState({activeModal: 'MY_MODAL'});\r\n    };\r\n\r\n    closeModal = () => {\r\n        this.setState({activeModal: null});\r\n    };\r\n\r\n    joinToGroup = () => {\r\n        connect.send(\"VKWebAppJoinGroup\", GROUP_ID);\r\n    };\r\n\r\n    openQRScanner = () => {\r\n        setTimeout(function () {\r\n            connect.send(\"VKWebAppOpenQR\");\r\n        }, 300)\r\n\r\n    }\r\n\r\n    handleModalAction = (flag) => {\r\n        this.closeModal()\r\n        const flagMap = {\r\n            joinGroup: () => this.joinToGroup(),\r\n            qrSuccess: () => this.openQRScanner()\r\n        }\r\n        flagMap[flag]()\r\n    }\r\n\r\n    activateJoinGroupModal = () => {\r\n        this.setState({\r\n            currentTitle: 'Вступление в группу',\r\n            currentCaption: 'Для начисления балов подпишитесь на группу и рассылку',\r\n            currentButtonText: 'Вступить',\r\n            actionFlag: 'joinGroup'\r\n        })\r\n        this.activateModal()\r\n    }\r\n\r\n    QRSuccessModal = () => {\r\n        this.setState({\r\n            currentTitle: 'Чек успешно отправлен',\r\n            currentCaption: 'В ближайшее время мы выполним проверку и начислим балы',\r\n            currentButtonText: 'Сканировать еще',\r\n            actionFlag: 'qrSuccess'\r\n        })\r\n        this.activateModal()\r\n    }\r\n\r\n    componentDidMount() {\r\n        connect.subscribe(({detail}) => {\r\n            switch (detail.type) {\r\n                case 'VKWebAppGetUserInfoResult':\r\n                    this.setState({fetchedUser: detail.data});\r\n                    break;\r\n                case 'VKWebAppAllowMessagesFromGroupResult':\r\n                    if (detail.data.request_id === 'messages.isMessagesFromGroupAllowed' && detail.data.result) {\r\n                        this.setState({isMessagesAllowed: true})\r\n                        this.QRSuccessModal()\r\n                    }\r\n                    break;\r\n                case 'VKWebAppJoinGroupResult':\r\n                    if (detail.data.result) {\r\n                        this.sendQRResult()\r\n                    }\r\n                    break;\r\n                case 'VKWebAppOpenQRResult':\r\n                    this.handleQRResult(detail.data.qr_reult)\r\n                    break;\r\n\r\n                // METHODS\r\n                case 'VKWebAppCallAPIMethodResult':\r\n                    if (detail.data.request_id === 'groups.isMember' && detail.data.response === 0) {\r\n                        this.activateJoinGroupModal()\r\n                    }\r\n                    if (detail.data.request_id === 'groups.isMember' && detail.data.response === 1) {\r\n                        this.setState({isMember: true})\r\n                        this.sendQRResult()\r\n                    }\r\n\r\n                    if (detail.data.request_id === 'messages.isMessagesFromGroupAllowed' && detail.data.response.is_allowed === 1) {\r\n                        this.setState({isMessagesAllowed: true})\r\n                        this.QRSuccessModal()\r\n                    }\r\n                    if (detail.data.request_id === 'messages.isMessagesFromGroupAllowed' && detail.data.response.is_allowed === 0) {\r\n                        connect.send(\"VKWebAppAllowMessagesFromGroup\", {\r\n                            request_id: \"messages.isMessagesFromGroupAllowed\", ...GROUP_ID\r\n                        });\r\n                    }\r\n                    break;\r\n                default:\r\n                    console.log('default');\r\n            }\r\n        });\r\n        connect.send('VKWebAppGetUserInfo', {});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View activePanel={this.state.activePanel}>\r\n                <Panel id={'home'}>\r\n                    <PanelHeader>ТРК Московский</PanelHeader>\r\n\r\n                    {this.state.fetchedUser &&\r\n                    <Group title=\"Выполняй задания и участвуй в розыгрышах\">\r\n                        <ListItem\r\n                            before={\r\n                                this.state.fetchedUser.photo_200\r\n                                    ? <Avatar src={this.state.fetchedUser.photo_200}/>\r\n                                    : null}\r\n                            description={\r\n                                this.state.fetchedUser.city && this.state.fetchedUser.city.title\r\n                                    ? this.state.fetchedUser.city.title\r\n                                    : ''\r\n                            }\r\n                        >\r\n                            {`${this.state.fetchedUser.first_name} ${this.state.fetchedUser.last_name}`}\r\n                        </ListItem>\r\n                    </Group>}\r\n\r\n                    <Button\r\n                        onClick={this.startScanFlow}\r\n                        size=\"xl\"\r\n                        level=\"primary\"\r\n                    >\r\n                        Зарегистрировать чек\r\n                    </Button>\r\n\r\n                    <Modal\r\n                        activeModal={this.state.activeModal}\r\n                        currentTitle={this.state.currentTitle}\r\n                        currentCaption={this.state.currentCaption}\r\n                        actionFlag={this.state.actionFlag}\r\n                        currentButtonText={this.state.currentButtonText}\r\n                        onCloseModal={this.closeModal}\r\n                        onAction={this.handleModalAction}\r\n                    />\r\n                </Panel>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import 'core-js/es6/map';\r\nimport 'core-js/es6/set';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport connect from '@vkontakte/vkui-connect';\r\nimport App from './App';\r\n// import registerServiceWorker from './sw';\r\n\r\n// Init VK App\r\nconnect.send('VKWebAppInit', {});\r\nconsole.log('kek', connect.send(\"VKWebAppGetUserInfo\", {}))\r\n\r\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\r\n// расскомментируйте строку с registerServiceWorker();\r\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\r\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT \r\n// registerServiceWorker();\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}